import { Box, Button, Drawer, Stack } from "@mantine/core";
import PageHeader from "../components/PageHeader";
import DocumentEntry from "../components/DocumentEntry";
import { Document, useProjectStore } from "../stores/ProjectStore";
import { useMemo } from "react";
import { IconListSearch, IconRun } from "@tabler/icons-react";
import { RunSolution } from "../wailsjs/go/main/App";
import { useDisclosure } from "@mantine/hooks";
import LogEventTable from "../components/LogEventTable";
import { useLogsStore } from "../stores/LogsStore";
import Page from "../components/Page";

export default function ProjectPage() {
  const getDocuments = useProjectStore((state) => state.getDocuments);
  const documents = useMemo(() => {
    return getDocuments("solution") || [];
  }, [getDocuments]);

  const [opened, { open, close }] = useDisclosure();
  const events = useLogsStore((state) => state.solutionEvents);
  const startRecording = useLogsStore(
    (state) => state.startRecordingSolutionEvents
  );
  const stopRecording = useLogsStore(
    (state) => state.stopRecordingSolutionEvents
  );

  function handleRun(doc: Document) {
    open();
    startRecording();
    RunSolution(doc.path)
      .then((result) => {
        console.log(result);
      })
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        stopRecording();
      });
  }
  return (
    <Page title="Solutions">
      <Box>
        <Stack>
          <PageHeader
            title="API Solutions"
            description="Solutions define how code is generated by linking modules to templates"
          >
            <>
              <Button
                variant="subtle"
                onClick={open}
                leftIcon={<IconListSearch />}
              >
                Logs
              </Button>
            </>
          </PageHeader>
          {documents.map((doc) => (
            <DocumentEntry
              doc={doc}
              key={doc.name}
              actions={
                <>
                  <Button
                    variant="subtle"
                    leftIcon={<IconRun />}
                    onClick={() => handleRun(doc)}
                  >
                    Run
                  </Button>
                </>
              }
            />
          ))}
        </Stack>
        <Drawer
          opened={opened}
          onClose={close}
          size="xs"
          position="bottom"
          title="Solution Events"
        >
          <LogEventTable events={events} height="xs" />
        </Drawer>
      </Box>
    </Page>
  );
}
