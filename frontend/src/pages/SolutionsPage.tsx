import { Box, Button, Drawer, Stack, Menu, Indicator } from "@mantine/core";
import PageHeader from "../components/PageHeader";
import DocumentEntry from "../components/DocumentEntry";
import { Document, useProjectStore } from "../stores/ProjectStore";
import { useMemo } from "react";
import { IconListSearch, IconRefresh, IconRun } from "@tabler/icons-react";
import { RunSolution, WatchSolution } from "../wailsjs/go/main/App";
import { useDisclosure } from "@mantine/hooks";
import LogEventTable from "../components/LogEventTable";
import { useLogsStore } from "../stores/LogsStore";
import Page from "../components/Page";
import useTrackAction from "../hooks/useTrackAction";
import { useSolutionStore } from "../stores/SolutionStore";

export default function ProjectPage() {
  const autoRuns = useSolutionStore((state) => state.autoRuns);
  const setAutoRun = useSolutionStore((state) => state.setAutoRun);
  const trackAction = useTrackAction();
  const getDocuments = useProjectStore((state) => state.getDocuments);
  const documents = useMemo(() => {
    return getDocuments("solution") || [];
  }, [getDocuments]);

  const [opened, { open, close }] = useDisclosure();
  const events = useLogsStore((state) => state.solutionEvents);
  const startRecording = useLogsStore(
    (state) => state.startRecordingSolutionEvents
  );
  const stopRecording = useLogsStore(
    (state) => state.stopRecordingSolutionEvents
  );

  function handleRun(doc: Document) {
    const autoRun = autoRuns[doc.path];
    if (autoRun) {
      return handleStopAutoRun(doc);
    }
    trackAction("run_solution", doc.path);
    open();
    startRecording();
    RunSolution(doc.path)
      .then((result) => {
        console.log(result);
      })
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        stopRecording();
      });
  }
  function handleAutoRun(doc: Document) {
    const autoRun = autoRuns[doc.path];
    const toggledRun = !autoRun;
    if (toggledRun) {
      open();
      startRecording();
    } else {
      close();
      stopRecording();
    }
    WatchSolution(doc.path, toggledRun)
      .then(() => {
        setAutoRun(doc.path, toggledRun);
      })
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        if (!toggledRun) {
          stopRecording();
        }
      });
  }

  function handleStopAutoRun(doc: Document) {
    close();
    stopRecording();
    WatchSolution(doc.path, false)
      .then(() => {
        console.log("stopped auto run");
        setAutoRun(doc.path, false);
      })
      .catch((err) => {
        console.error(err);
      });
  }

  return (
    <Page title="Solutions">
      <Box>
        <Stack>
          <PageHeader
            title="API Solutions"
            description="Solutions define how code is generated by linking modules to templates"
          >
            <>
              <Button
                variant="subtle"
                onClick={open}
                leftSection={<IconListSearch />}
              >
                Logs
              </Button>
            </>
          </PageHeader>
          {documents.map((doc) => {
            const autoRun = autoRuns[doc.path];
            return (
              <DocumentEntry
                doc={doc}
                key={doc.name}
                actions={
                  <>
                    <Indicator offset={8} disabled={!autoRun}>
                      <Button
                        variant="subtle"
                        leftSection={<IconRun />}
                        onClick={() => handleRun(doc)}
                      >
                        {autoRun ? "Stop" : "Run"}
                      </Button>
                    </Indicator>
                  </>
                }
                menuItems={
                  <>
                    <Menu.Item
                      leftSection={<IconRefresh />}
                      onClick={() => handleAutoRun(doc)}
                      c={autoRun ? "green" : ""}
                    >
                      Auto Run
                    </Menu.Item>
                  </>
                }
              />
            );
          })}
        </Stack>
        <Drawer
          opened={opened}
          onClose={close}
          size="xs"
          position="bottom"
          title="Solution Events"
        >
          <LogEventTable events={events} height="xs" />
        </Drawer>
      </Box>
    </Page>
  );
}
